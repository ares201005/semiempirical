# flake8: noqa
#
# Modified based on MINDO3_Parameters.py and Slater.py in PyQuante-1.6
#
"""
 MINDO3.py: Dewar's MINDO/3 Semiempirical Method

 This program is part of the PyQuante quantum chemistry program suite.

 Copyright (c) 2004, Richard P. Muller. All Rights Reserved.

 PyQuante version 1.2 and later is covered by the modified BSD
 license. Please see the file LICENSE that is part of this
 distribution.
"""

import numpy
from pyscf import lib
from pyscf.data.nist import HARTREE2EV

E2 = 14.399             # Coulomb's law coeff if R in \AA and resulting E in eV
E2 /= HARTREE2EV        # Convert to Hartree
EV2KCAL = 23.061        # Conversion of energy in eV to energy in kcal/mol
HARTREE2KCAL = HARTREE2EV * EV2KCAL

#############################
#
# MINDO/3 parameters
#

# in eV
USS3 = numpy.array((
        0.  , -12.505, 0.  ,
        0.  , 0.  , -33.61, -51.79, -66.06, -91.73, -129.86, 0.  ,
        0.  , 0.  , 0.    , -39.82, -56.23, -73.39, -98.99 , 0.  ,
))
UPP3 = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 0.  , -25.11, -39.18, -56.40, -78.80, -105.93, 0.  ,
        0.  , 0.  , 0.    , -29.15, -42.31, -57.25, -76.43 , 0.  ,
))
# Convert to Eh
USS3 *= 1./HARTREE2EV
UPP3 *= 1./HARTREE2EV

# *** ONE CENTER REPULSION INTEGRALS
#     GSS ::= (SS,SS)
#     GPP ::= (PP,PP)
#     GSP ::= (SS,PP)
#     GP2 ::= (PP,P*P*)
#     HSP ::= (SP,SP)
GSSM = numpy.array((  # noqa: E131
        0.  , 12.848, 0.  ,
        0.  , 9.00, 10.59, 12.23, 13.59, 15.42, 16.92, 0.  ,
        0.  , 0.  , 8.09, 9.82, 11.56, 12.88, 15.03, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 15.03643948, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 15.04044855, 0.  ,
))
GPPM = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 6.97, 8.86, 11.08, 12.98, 14.52, 16.71, 0.  ,
        0.  , 0.  , 5.98, 7.31, 8.64, 9.90, 11.30, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 11.27632539, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 11.14778369, 0.  ,
))
GSPM = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 7.43, 9.56, 11.47, 12.66, 14.48, 17.25, 0.  ,
        0.  , 0.  , 6.63, 8.36, 10.08, 11.26, 13.16, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 13.03468242, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 13.05655798, 0.  ,
))
GP2M = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 6.22, 7.86, 9.84, 11.59, 12.98, 14.91, 0.  ,
        0.  , 0.  , 5.40, 6.54, 7.68, 8.83, 9.97, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 9.85442552, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 9.91409071, 0.  ,
))
HSPM = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 1.28, 1.81, 2.43, 3.14, 3.94, 4.83, 0.  ,
        0.  , 0.  , 0.70, 1.32, 1.92, 2.26, 2.42, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 2.45586832, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
                    0.  , 0.  , 0.  , 0.  , 2.45638202, 0.  ,
))
HP2M = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 0.  , 0.50, 0.62, 0.70, 0.77, 0.90, 0.  ,
        0.  , 0.  , 0.  , 0.38, 0.48, 0.54, 0.67, 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
        0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  , 0.  ,
))
GSSM *= 1./HARTREE2EV
GPPM *= 1./HARTREE2EV
GSPM *= 1./HARTREE2EV
GP2M *= 1./HARTREE2EV
HSPM *= 1./HARTREE2EV
HP2M *= 1./HARTREE2EV


# *** F03 IS THE ONE CENTER AVERAGED REPULSION INTEGRAL FOR USE IN THE
#        TWO CENTER ELECTRONIC REPULSION INTEGRAL EVALUATION.
F03 = numpy.array((
        0., 12.848, 10.0,
        10.0, 0.0, 8.958, 10.833, 12.377, 13.985, 16.250,
        10.000, 10.000, 0.000, 0.000,7.57 ,  9.00 ,10.20 , 11.73
))
F03 *= 1./HARTREE2EV

VS = numpy.array((
        0.  , -13.605, 0.  ,
        0.  , 0.  , -15.160, -21.340, -27.510, -35.300, -43.700, -17.820,
        0.  , 0.  , 0.     , 0.     , -21.100, -23.840, -25.260, 0.     ,
))
VP = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 0.  , -8.520, -11.540, -14.340, -17.910, -20.890, -8.510,
        0.  , 0.  , 0.    , 0.     , -10.290, -12.410, -15.090, 0.    ,
))
VS *= 1./HARTREE2EV
VP *= 1./HARTREE2EV

# *** HERE COMES THE OPTIMIZED SLATER_S EXPONENTS FOR THE EVALUATION
#     OF THE OVERLAP INTEGRALS AND MOLECULAR DIPOLE MOMENTS.
ZS3 = numpy.array((
        0.  , 1.30, 0.  ,
        0.  , 0.  , 1.211156, 1.739391, 2.704546, 3.640575, 3.111270, 0.  ,
        0.  , 0.  , 0.      , 1.629173, 1.926108, 1.719480, 3.430887, 0.  ,
))
ZP3 = numpy.array((
        0.  , 0.  , 0.  ,
        0.  , 0.  , 0.972826, 1.709645, 1.870839, 2.168448, 1.419860, 0.  ,
        0.  , 0.  , 0.      , 1.381721, 1.590665, 1.403205, 1.627017, 0.  ,
))


# *** BETA3 AND ALP3 ARE THE BOND PARAMETERS USED IN THE
#     RESONANCE INTEGRAL AND THE CORE CORE REPULSION INTEGRAL RESPECTIVE
Bxy = numpy.array((
        # H                B         C         N         O         F                     Si        P         S        Cl
        0.244770,
        0       , 0,
        0       , 0, 0,
        0       , 0, 0, 0,
        0.185347, 0, 0, 0, 0.151324,
        0.315011, 0, 0, 0, 0.250031, 0.419907,
        0.360776, 0, 0, 0, 0.310959, 0.410886, 0.377342,
        0.417759, 0, 0, 0, 0.349745, 0.464514, 0.458110, 0.659407,
        0.195242, 0, 0, 0, 0.219591, 0.247494, 0.205347, 0.334044, 0.197464,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0, 0,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0, 0, 0,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0, 0, 0, 0,
        0.289647, 0, 0, 0, 0       , 0.411377, 0       , 0       , 0       , 0, 0, 0, 0, 0.291703,
        0.320118, 0, 0, 0, 0       , 0.457816, 0       , 0.470000, 0.300000, 0, 0, 0, 0, 0       , 0.311790,
        0.220654, 0, 0, 0, 0       , 0.284620, 0.313170, 0.422890, 0       , 0, 0, 0, 0, 0       , 0       , 0.202489,
        0.231653, 0, 0, 0, 0       , 0.315480, 0.302298, 0       , 0       , 0, 0, 0, 0, 0       , 0.277322, 0.221764, 0.258969,
))
BETA3 = lib.unpack_tril(Bxy)
del(Bxy)

Axy = numpy.array((
        # H                B         C         N         O         F                     Si        P         S        Cl
        1.489450,
        0       , 0,
        0       , 0, 0,
        0       , 0, 0, 0,
        2.090352, 0, 0, 0, 2.280544,
        1.475836, 0, 0, 0, 2.138291, 1.371208,
        0.589380, 0, 0, 0, 1.909763, 1.635259, 2.029618,
        0.478901, 0, 0, 0, 2.484827, 1.820975, 1.873859, 1.537190,
        3.771362, 0, 0, 0, 2.862183, 2.725913, 2.861667, 2.266949, 3.864997,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0, 0,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0, 0, 0,
        0       , 0, 0, 0, 0       , 0       , 0       , 0       , 0       , 0, 0, 0, 0,
        0.940789, 0, 0, 0, 0       , 1.101382, 0       , 0       , 0       , 0, 0, 0, 0, 0.918432,
        0.923170, 0, 0, 0, 0       , 1.029693, 0       , 1.662500, 1.750000, 0, 0, 0, 0, 0       , 1.186652,
        1.700698, 0, 0, 0, 0       , 1.761370, 1.878176, 2.077240, 0       , 0, 0, 0, 0, 0       , 0       , 1.751617,
        2.089404, 0, 0, 0, 0       , 1.676222, 1.817064, 0       , 0       , 0, 0, 0, 0, 0       , 1.543720, 1.950318, 1.792125,
))
ALP3 = lib.unpack_tril(Axy)
del(Axy)


# *** EISOL3 AND EHEAT3 ARE THE GS ELECTRONIC ENERGY OF THE NEUTRAL ATOM
#     (IN E.V.) AND THE HEAT OF FORMATION IF THE FREE ATOM (IN KCAL/MOL)
EHEAT3 = numpy.array((
        0.  , 52.102, 0.  ,
        0.  , 0.  , 135.7, 170.89, 113.0, 59.559, 18.86, 0.  ,
        0.  , 0.  , 0.   , 106.0 , 79.8 , 65.65 , 28.95, 0.  ,
))
EISOL3 = numpy.array((
        0.  , -12.505, 0.  ,
        0.  , 0.  ,-61.70,-119.47,-187.51,-307.07,-475.00,0.  ,
        0.  , 0.  , 0.   ,-90.98 ,-150.81,-229.15,-345.93,0.  ,
))

#   CORE IS THE CHARGE ON THE ATOM AS SEEN BY THE ELECTRONS
#
CORE = numpy.array((0,
        1, 0,
        1, 2, 3, 4, 5, 6, 7, 0,
        1, 2, 3, 4, 5, 6, 7, 0,
        1, 2, 3, 4, 5, 6, 7, 8, 9,10,11, 2, 3, 4, 5, 6, 7, 0,
        1, 2, 3, 4, 5, 6, 7, 8, 9,10,11, 2, 3, 4, 5, 6, 7, 0,
        1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,
           3, 4, 5, 6, 7, 8, 9,10,11, 2, 3, 4, 5, 6, 7, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 1, -2, -1, 0
))

# MINDO/3 parameters end
##############################
#
# MNDO-PM3 parameters end
#
#      COMMON /PM3 /  USSPM3(107), UPPPM3(107), UDDPM3(107), ZSPM3(107),
#      ZPPM3(107), ZDPM3(107), BETASP(107), BETAPP(107), BETADP(107),
#      ALPPM3(107), EISOLP(107), DDPM3(107), QQPM3(107), AMPM3(107),
#      ADPM3(107), AQPM3(107) ,GSSPM3(107), GSPPM3(107), GPPPM3(107),
#      GP2PM3(107), HSPPM3(107),POLVOP(107)


# MNDO-PM3 parameters end
##############################

# Gaussian functions for fitting to Slaters. These functions are
# STO-6G fits to slater exponents with exponents of 1. To fit
# to exponents of \zeta, you need only multiply each
# exponent by \zeta^2
# The rest of these functions can be obtained from Stewart,
# JCP 52, 431 (1970); DOI:10.1063/1.1672702

gexps_1s = [2.310303149e01,4.235915534e00,1.185056519e00,
            4.070988982e-01,1.580884151e-01,6.510953954e-02]
gcoefs_1s = [9.163596280e-03,4.936149294e-02,1.685383049e-01,
             3.705627997e-01,4.164915298e-01,1.303340841e-01]

gexps_2s = [2.768496241e01,5.077140627e00,1.426786050e00,
            2.040335729e-01,9.260298399e-02,4.416183978e-02]
gcoefs_2s = [-4.151277819e-03,-2.067024148e-02,-5.150303337e-02,
             3.346271174e-01,5.621061301e-01,1.712994697e-01]

gexps_2p = [5.868285913e00,1.530329631e00,5.475665231e-01,
            2.288932733e-01,1.046655969e-01,4.948220127e-02]
gcoefs_2p = [7.924233646e-03,5.144104825e-02,1.898400060e-01,
             4.049863191e-01,4.012362861e-01,1.051855189e-01]

gexps_3s = [3.273031938e00,9.200611311e-01,3.593349765e-01,
            8.636686991e-02,4.797373812e-02,2.724741144e-02]
gcoefs_3s = [-6.775596947e-03,-5.639325779e-02,-1.587856086e-01,
             5.534527651e-01,5.015351020e-01,7.223633674e-02]

gexps_3p = [5.077973607e00,1.340786940e00,2.248434849e-01,
            1.131741848e-01,6.076408893e-02,3.315424265e-02]
gcoefs_3p = [-3.329929840e-03,-1.419488340e-02,1.639395770e-01,
             4.485358256e-01,3.908813050e-01,7.411456232e-02]
gexps_3d = [2.488296923,7.981487853e-1,3.311327490e-1,
            1.559114463e-1,7.877734732e-2,4.058484363e-2]
gcoefs_3d = [7.283828112e-3,5.386799363e-2,2.072139149e-1,
             4.266269092e-1,3.843100204e-1,8.902827546e-2]

gexps_4s = [3.232838646,3.605788802e-1,1.717902487e-1,
            5.277666487e-2,3.163400284e-2,1.874093091e-2]
gcoefs_4s = [1.374817488e-3,-8.666390043e-2,-3.130627309e-1,
             7.812787397e-1,4.389247988-1,2.487178756e-2]
gexps_4p = [2.389722618, 7.960947826e-1,3.415541380e-1,
            8.847434525e-2,4.958248334e-2,2.816929784e-2]
gcoefs_4p = [-1.665913575e-3,-1.657464971e-2,-5.958513378e-2,
             4.053115554e-1,5.433958189e-1,1.20970491e-1]

# Here are the STO-6G values from Hehre, Stewart, Pople JCP 51, 2657 (1969); DOI:10.1063/1.1672392
# and Hehre, Ditchfield, Stewart, Pople JCP 52, 2769 (1970); DOI:10.1063/1.1673374
# which are a little different, in that they use the same exponent for
# 2s,2p, and 3s,3p, which makes the fit a bit different.
gexps_old_2 = [1.03087e1,2.04036,6.34142e-1,
               2.43977e-1,1.05960e-1,4.85690e-2]
gcoefs_old_2s = [-1.32528e-2,-4.69917e-2,-3.37854e-2,
                 2.50242e-1,2.95117e-1,2.40706e-1]
gcoefs_old_2p = [3.75970e-3,3.76794e-2,1.73897e-1,
                 4.18036e-1,4.25860e-1,1.017008e-1]
gexps_old_3 = [3.0817,8.24896e-1,3.09345e-1,
               1.38468e-1,6.85210e-2,3.53133e-2]
gcoefs_old_3s = [-7.94313e-3,-7.10026e-2,-1.78503e-1,
                 1.51064e-1,7.35491e-1,2.76059e-1]
gcoefs_old_3p = [-7.13936e-3,-1.82928e-2,7.62162e-2,
                 4.14510e-1,4.88962e-1,1.05882e-1]

gexps = { # indexed by N,s_or_p:
    (1,0) : gexps_1s,
    (2,0) : gexps_2s,
    (2,1) : gexps_2p,
    (3,0) : gexps_3s,
    (3,1) : gexps_3p
}

gcoefs = {  # indexed by N,s_or_p:
    (1,0) : gcoefs_1s,
    (2,0) : gcoefs_2s,
    (2,1) : gcoefs_2p,
    (3,0) : gcoefs_3s,
    (3,1) : gcoefs_3p
}

gexps_old = { # indexed by N,s_or_p:
    (1,0) : gexps_1s,
    (2,0) : gexps_old_2,
    (2,1) : gexps_old_2,
    (3,0) : gexps_old_3,
    (3,1) : gexps_old_3
}

gcoefs_old = {  # indexed by N,s_or_p:
    (1,0) : gcoefs_1s,
    (2,0) : gcoefs_old_2s,
    (2,1) : gcoefs_old_2p,
    (3,0) : gcoefs_3s,
    (3,1) : gcoefs_3p
}

del(lib)

MOPAC_DD = numpy.array((0.,
    0.       , 0.       ,
    2.0549783, 1.4373245, 0.9107622, 0.8236736, 0.6433247, 0.4988896, 0.4145203, 0.,
    0.       , 0.       , 1.4040443, 1.1631107, 1.0452022, 0.9004265, 0.5406286, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 1.3581113, 0., 1.2472095, 0., 0.       , 0.8458104, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 1.4878778, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 1.8750829, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 1.4078712, 0.8231596, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.0684105, 0.       , 0., 0., 0., 0.,
))

MOPAC_QQ = numpy.array((0.,
    0.       , 0.       ,
    1.7437069, 1.2196103, 0.7874223, 0.7268015, 0.5675528, 0.4852322, 0.4909446, 0.,
    0.       , 0.       , 1.2809154, 1.3022422, 0.8923660, 1.0036329, 0.8057208, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 1.5457406, 0., 1.0698642, 0., 0.       , 1.0407133, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 1.1887388, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 1.5424241, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 1.1658281, 0.8225156, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 1.0540926, 0.       , 0., 0., 0., 0.,
))

MOPAC_AM = numpy.array((0.,
    0.4721793, 0.       ,
    0.2682837, 0.3307607, 0.3891951, 0.4494671, 0.4994487, 0.5667034, 0.6218302, 0.,
    0.5      , 0.       , 0.2973172, 0.3608967, 0.4248440, 0.4331617, 0.5523705, 0.,
    0.5      , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.4336641, 0., 0.3737084, 0., 0.       , 0.5526071, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.5527544, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 0.3969129, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 0.3608967, 0.4733554, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.4721793, 0.5      , 0.5      ,0.5      , 0.5      , 0.       ,
))

MOPAC_AD = numpy.array((0.,
    0.4721793, 0.       ,
    0.2269793, 0.3356142, 0.5045152, 0.6082946, 0.7820840, 0.9961066, 1.2088792, 0.,
    0.       , 0.       , 0.2630229, 0.3829813, 0.3275319, 0.5907115, 0.7693200, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.2317423, 0., 0.3180309, 0., 0.       , 0.6024598, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.4497523, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 0.2926605, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 0.3441817, 0.5889395, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.9262742, 0.       , 0., 0., 0., 0.,
))

MOPAC_AQ = numpy.array((0.,
    0.4721793, 0.       ,
    0.2614581, 0.3846373, 0.5678856, 0.6423492, 0.7883498, 0.9065223, 0.9449355, 0.,
    0.       , 0.       , 0.3427832, 0.3712106, 0.4386854, 0.6454943, 0.6133369, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.2621165, 0., 0.3485612, 0., 0.       , 0.5307555, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.4631775, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 0.3360599, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 0.3999442, 0.5632724, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.2909059, 0.       , 0., 0., 0., 0.,
))

MOPAC_ALP = numpy.array((0.,
    2.8823240, 0.       ,
    1.2501400, 1.6694340, 2.4469090, 2.6482740, 2.9472860, 4.4553710, 5.5178000, 0.,
    1.6680000, 0.       , 1.9765860, 2.2578160, 2.4553220, 2.4616480, 2.9193680, 0.,
    1.4050000, 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 1.4845630, 0., 2.1364050, 0., 0.       , 2.5765460, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 2.2994240, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 1.4847340, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 2.1961078, 2.4916445, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 2.5441341, 1.5      , 1.5      ,1.5      , 1.5      , 0.       ,
))

MOPAC_ZS = numpy.array((0.,
    1.1880780, 0.       ,
    0.7023800, 1.0042100, 1.6117090, 1.8086650, 2.3154100, 3.1080320, 3.7700820, 0.,
    0.       , 0.       , 1.5165930, 1.8306970, 1.9812800, 2.3665150, 3.6313760, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 1.9542990, 0., 1.2196310, 0., 0.       , 3.0641330, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 2.1028580, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 2.0364130, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 1.4353060, 2.6135910, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 4.0000000, 0.       , 0., 0., 0., 0.,
))

MOPAC_ZP = numpy.array((0.,
    0.       , 0.       ,
    0.7023800, 1.0042100, 1.5553850, 1.6851160, 2.1579400, 2.5240390, 2.4946700, 0.,
    0.       , 0.       , 1.3063470, 1.2849530, 1.8751500, 1.6672630, 2.0767990, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 1.3723650, 0., 1.9827940, 0., 0.       , 2.0383330, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 2.1611530, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 1.9557660, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 1.4353060, 2.0343930, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.3000000, 0.       , 0., 0., 0., 0.,
))

MOPAC_ZD = numpy.array((0.,
    0.       , 0.       ,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.,
    0.       , 0.       , 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.0000000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 1.0000000, 0., 0.       , 0., 0.       , 1.0000000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 1.0000000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 0.       , 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 1.0000000, 1.0000000, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.3000000, 0.       , 0., 0., 0., 0.,
))

MOPAC_USS = numpy.array((0.,
    -11.396427, 0.       ,
    -5.128000,-16.602378,-34.492870,-52.028658,-71.860000,-97.830000,-136.105579,0.,
    0.       , 0.       ,-24.353585,-33.953622,-42.029863,-56.694056,-111.613948,0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0.,-21.040008, 0.,-34.183889, 0., 0.       ,-104.656063,0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       ,-103.589663,0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0.,-19.941578, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       ,-40.568292,-75.239152, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0.,-11.906276, 0.       , 0., 0., 0., 0.,
)) * 1./HARTREE2EV

MOPAC_UPP = numpy.array((0.,
    0.       , 0.       ,
    -2.721200,-10.703771,-22.631525,-39.614239,-57.167581,-78.26238,-104.889885, 0.,
    0.       , 0.       ,-18.363645,-28.934749,-34.030709,-48.717049,-76.640107, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0.,-17.655574, 0.,-28.640811, 0., 0.       ,-74.930052, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       ,-74.429997, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0.,-11.110870, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       ,-28.089187,-57.832013, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0.,
)) * 1./HARTREE2EV

MOPAC_GSS = numpy.array((0.,
    12.8480000, 0.       ,
    7.3000000, 9.0000000,10.5900000,12.2300000,13.5900000,15.4200000,16.9200000, 0.,
    0.       , 0.       , 8.0900000, 9.8200000,11.5600050,11.7863290,15.0300000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0.,11.8000000, 0.,10.1686050, 0., 0.       ,15.0364395, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       ,15.0404486, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 10.800000, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 9.8200000,12.8800000, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0.,12.8480000, 0.       , 0., 0., 0., 0.,
))

MOPAC_GSP = numpy.array((0.,
    0.       , 0.       ,
    5.4200000, 7.4300000, 9.5600000,11.4700000,12.6600000,14.4800000,17.2500000, 0.,
    0.       , 0.       , 6.6300000, 8.3600000, 5.2374490, 8.6631270,13.1600000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0.,11.1820180, 0., 8.1444730, 0., 0.       ,13.0346824, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       ,13.0565580, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 9.3000000, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 8.3600000,11.2600000, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0.,
))

MOPAC_GPP = numpy.array((0.,
    0.       , 0.       ,
    5.0000000, 6.9700000, 8.8600000,11.0800000,12.9800000,14.5200000,16.7100000, 0.,
    0.       , 0.       , 5.9800000, 7.3100000, 7.8775890,10.0393080,11.3000000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0.,13.3000000, 0., 6.6719020, 0., 0.       ,11.2763254, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       ,11.1477837, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0.,14.3000000, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 7.3100000, 9.9000000, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0.,
))

MOPAC_GP2 = numpy.array((0.,
    0.       , 0.       ,
    4.5200000, 6.2200000, 7.8600000, 9.8400000,11.5900000,12.9800000,14.9100000, 0.,
    0.       , 0.       , 5.4000000, 6.5400000, 7.3076480, 7.7816880, 9.9700000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0.,12.9305200, 0., 6.2697060, 0., 0.       , 9.8544255, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 9.9140907, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0.,13.5000000, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 6.5400000, 8.8300000, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0.,
))

MOPAC_HSP = numpy.array((0.,
    0.       , 0.       ,
    0.8300000, 1.2800000, 1.8100000, 2.4300000, 3.1400000, 3.9400000, 4.8300000, 0.,
    0.       , 0.       , 0.7000000, 1.3200000, 0.7792380, 2.5321370, 2.4200000, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.4846060, 0., 0.9370930, 0., 0.       , 2.4558683, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 2.4563820, 0.,
    0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.       , 0.       , 0., 0., 0., 0., 0., 0., 0., 0., 1.3000000, 0., 0., 0., 0., 0., 0.,
    0.       , 0.       , 0.       , 1.3200000, 2.2600000, 0.       , 0.       , 0., 0., 0., 0., 0.       , 0., 0.       , 0., 0.1000000, 0.       , 0., 0., 0., 0.,
))

MOPAC_IDEA_FN1 = numpy.zeros((108,10))
dat = (
    1 , 1,  0.1227960,
    1 , 2,  0.0050900,
    1 , 3, -0.0183360,
    6 , 1,  0.0113550,
    6 , 2,  0.0459240,
    6 , 3, -0.0200610,
    6 , 4, -0.0012600,
    7 , 1,  0.0252510,
    7 , 2,  0.0289530,
    7 , 3, -0.0058060,
    8 , 1,  0.2809620,
    8 , 2,  0.0814300,
    9 , 1,  0.2420790,
    9 , 2,  0.0036070,
    13, 1,  0.0900000,
    14, 1,  0.25,
    14, 2,  0.061513,
    14, 3,  0.0207890,
    15, 1, -0.0318270,
    15, 2,  0.0184700,
    15, 3,  0.0332900,
    16, 1, -0.5091950,
    16, 2, -0.0118630,
    16, 3,  0.0123340,
    17, 1,  0.0942430,
    17, 2,  0.0271680,
    35, 1,  0.0666850,
    35, 2,  0.0255680,
    53, 1,  0.0043610,
    53, 2,  0.0157060,
)
MOPAC_IDEA_FN1[dat[0::3],dat[1::3]] = numpy.array(dat[2::3]) / HARTREE2EV

MOPAC_IDEA_FN2 = numpy.zeros((108,10))
dat = (
    1 , 1,  5.0000000,
    1 , 2,  5.0000000,
    1 , 3,  2.0000000,
    6 , 1,  5.0000000,
    6 , 2,  5.0000000,
    6 , 3,  5.0000000,
    6 , 4,  5.0000000,
    7 , 1,  5.0000000,
    7 , 2,  5.0000000,
    7 , 3,  2.0000000,
    8 , 1,  5.0000000,
    8 , 2,  7.0000000,
    9 , 1,  4.8000000,
    9 , 2,  4.6000000,
    13, 1, 12.3924430,
    14, 1,  9.000,
    14, 2,  5.00,
    14, 3,  5.00,
    15, 1,  6.0000000,
    15, 2,  7.0000000,
    15, 3,  9.0000000,
    16, 1,  4.5936910,
    16, 2,  5.8657310,
    16, 3, 13.5573360,
    17, 1,  4.0000000,
    17, 2,  4.0000000,
    35, 1,  4.0000000,
    35, 2,  4.0000000,
    53, 1,  2.3000000,
    53, 2,  3.0000000,
)
MOPAC_IDEA_FN2[dat[0::3],dat[1::3]] = dat[2::3]

MOPAC_IDEA_FN3 = numpy.zeros((108,10))
dat = (
    1 , 1,  1.2000000,
    1 , 2,  1.8000000,
    1 , 3,  2.1000000,
    6 , 1,  1.6000000,
    6 , 2,  1.8500000,
    6 , 3,  2.0500000,
    6 , 4,  2.6500000,
    7 , 1,  1.5000000,
    7 , 2,  2.1000000,
    7 , 3,  2.4000000,
    8 , 1,  0.8479180,
    8 , 2,  1.4450710,
    9 , 1,  0.9300000,
    9 , 2,  1.6600000,
    13, 1,  2.0503940,
    14, 1,  0.911453,
    14, 2,  1.995569,
    14, 3,  2.990610,
    15, 1,  1.4743230,
    15, 2,  1.7793540,
    15, 3,  3.0065760,
    16, 1,  0.7706650,
    16, 2,  1.5033130,
    16, 3,  2.0091730,
    17, 1,  1.3000000,
    17, 2,  2.1000000,
    35, 1,  1.5000000,
    35, 2,  2.3000000,
    53, 1,  1.8000000,
    53, 2,  2.2400000,
)
MOPAC_IDEA_FN3[dat[0::3],dat[1::3]] = dat[2::3]
del(dat)

